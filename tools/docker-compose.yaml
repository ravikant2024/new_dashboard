version: '3.8'

services:
  elasticsearch:
    image: elasticsearch:7.9.1
    container_name: elastic_search
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - ./elastic_data:/usr/share/elasticsearch/data
      - ./elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    environment:
      - discovery.type=single-node
      - http.host=0.0.0.0
      - transport.host=0.0.0.0
      - xpack.security.enabled=false
      - xpack.monitoring.enabled=false
      - cluster.name=elasticsearch
      - bootstrap.memory_lock=true

    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Add Kibana Service
  kibana:
    image: kibana:7.9.1
    container_name: kibana
    ports:
      - "5601:5601"
    volumes:
      - ./kibana.yml:/usr/share/kibana/config/kibana.yml
      - ./kb_data:/usr/share/kibana/data
    depends_on:
      - elasticsearch
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  nats_server:
    container_name: oillp_nats
    image: 'nats'
    volumes:
      - ../:/backend
    command: "-c /backend/tools/nats.conf"
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-file: "3"   
        max-size: "5m"
    ports:
      - 6969:6969
      - 4362:4362
      - 4376:4376
      - 440:440
  mongodb:
    image: mongo:6.0.2
    container_name: mongo_db
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - ./mongo_data:/data/db          # Data storage
      - ./mongod.conf:/etc/mongod.conf:ro  # Mount configuration file
    command: ["mongod", "--config", "/etc/mongod.conf"]  # Use the custom config file
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  postgres:
    image: postgres:14-alpine
    container_name: postgres_db
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: example
      POSTGRES_DB: mydb
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    image: redis:latest
    container_name: redis_cache
    command: ["redis-server", "--requirepass", "redispassword"]
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  mongo_backup:
    image: mongo:latest
    container_name: mongo_backup
    entrypoint: ["/bin/sh", "-c", "while true; do mongodump --host mongo_db --username root --password password --out /backup/`date +%Y-%m-%d`; sleep 1800; done"]
    volumes:
      - ./mongo_backup:/backup
    depends_on:
      - mongodb
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  postgres_backup:
    image: postgres:latest
    container_name: postgres_backup
    entrypoint: ["/bin/sh", "-c", "while true; do PGPASSWORD=example pg_dump -U root -h postgres_db mydb > /backup/`date +%Y-%m-%d`.sql; sleep 1800; done"]
    volumes:
      - ./postgres_backup:/backup
    depends_on:
      - postgres
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  nginx:
    image: nginx:latest
    container_name: nginx_server
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ../frontend/build:/usr/share/nginx/html:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./photos:/usr/share/nginx/photos:ro
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  node:
    image: node:latest
    container_name: node_server
    working_dir: /app
    volumes:
      - ../backend:/app
    command: sh -c "npm install --force && npm run dev"
    ports:
      - "8081:8081"
      - "8443:8443"
    depends_on:
      - mongodb
      - postgres
      - redis
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
  wa_server:
    image: node:latest
    container_name: whatsapp_server
    working_dir: /app
    volumes:
      - ../whatsapp_server:/app
    command: sh -c "npm install --force && npm run start"
    ports:
      - "6162:6162"
      - "6163:6163"
    depends_on:
      - mongodb
      - postgres
      - redis
      - node
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
  web_server:
    image: node:latest
    container_name: web_socket
    working_dir: /app
    volumes:
      - ../backend:/app
    command: npm run web_server
    ports:
      - "6060:6060"
    depends_on:
      - mongodb
      - postgres
      - redis
      - elasticsearch
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
  license:
    image: node:latest
    container_name: license_server
    working_dir: /app
    volumes:
      - ../license_server:/app
    command: sh -c "npm install && npm run start"
    ports:
      - "4369:4369"
    depends_on:
      - mongodb
      - postgres
      - redis
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  react:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    image: react:latest
    container_name: react_frontend
    working_dir: /app
    volumes:
      - ../frontend:/app
    # command: sh -c "npm install --force && npm run build"
    ports:
      - "5173:5173"
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  dozzle:
    image: amir20/dozzle:latest
    container_name: dozzle
    ports:
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  mqtt:
    image: eclipse-mosquitto:latest
    container_name: mqtt_broker
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./mqtt_data:/mosquitto/data
      - ./mosquitto.conf:/mosquitto/config/mosquitto.conf
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  mongo_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  mqtt_data:
    driver: local
  mongo_backup:
    driver: local
  postgres_backup:
    driver: local
  elastic_data:
    driver: local
  kb_data:
    driver: local

networks:
  app-network:
    name: app-network
    driver: bridge
